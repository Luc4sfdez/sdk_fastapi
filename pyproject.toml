# fastapi-microservices-sdk/pyproject.toml 
# fastapi-microservices-sdk/pyproject.toml
[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "fastapi-microservices-sdk"
version = "0.1.0"
description = "SDK for building microservices with FastAPI - Compatible with FastAPI Full-Stack Template"
authors = [
    {name = "FastAPI Microservices Team", email = "team@fastapi-microservices.com"}
]
readme = "README.md"
license = {text = "MIT"}
requires-python = ">=3.8"
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Framework :: FastAPI",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Internet :: WWW/HTTP :: HTTP Servers",
    "Topic :: System :: Distributed Computing",
]
keywords = ["fastapi", "microservices", "sdk", "api", "web", "framework"]

# DEPENDENCIES COMPATIBLE WITH FASTAPI FULL-STACK TEMPLATE
dependencies = [
    # FastAPI Core - Same versions as template
    "fastapi>=0.104.1,<0.105.0",
    "uvicorn[standard]>=0.24.0,<0.25.0",
    "pydantic>=2.4.0,<2.5.0",
    "pydantic-settings>=2.0.0,<2.1.0",
    
    # Database - Compatible with template
    "sqlalchemy>=2.0.23,<2.1.0",
    "alembic>=1.12.1,<1.13.0",
    "asyncpg>=0.29.0,<0.30.0",  # PostgreSQL async
    "psycopg2-binary>=2.9.9,<2.10.0",  # PostgreSQL sync
    
    # HTTP Client for inter-service communication
    "httpx>=0.25.1,<0.26.0",
    "aiohttp>=3.9.0,<3.10.0",
    
    # CLI Tools
    "click>=8.1.7,<8.2.0",
    "rich>=13.6.0,<13.7.0",  # Better CLI output
    "typer>=0.9.0,<0.10.0",  # CLI framework
    
    # Template Engine
    "jinja2>=3.1.2,<3.2.0",
    
    # File handling
    "pyyaml>=6.0.1,<6.1.0",
    "toml>=0.10.2,<0.11.0",
    
    # Async utilities
    "asyncio-mqtt>=0.16.1,<0.17.0",  # MQTT support
    "aioredis>=2.0.1,<2.1.0",  # Redis async
    
    # Monitoring and observability
    "prometheus-client>=0.19.0,<0.20.0",
    "opentelemetry-api>=1.21.0,<1.22.0",
    "opentelemetry-sdk>=1.21.0,<1.22.0",
    
    # Validation and utilities
    "validators>=0.22.0,<0.23.0",
    "python-multipart>=0.0.6,<0.1.0",  # File uploads
    
    # Security and cryptography
    "cryptography>=41.0.0,<42.0.0",  # X.509 certificate handling
]

# OPTIONAL DEPENDENCIES FOR DIFFERENT FEATURES
[project.optional-dependencies]
# Database adapters
mysql = [
    "aiomysql>=0.2.0,<0.3.0",
    "pymysql>=1.1.0,<1.2.0",
]
mongodb = [
    "motor>=3.3.0,<3.4.0",
    "pymongo>=4.6.0,<4.7.0",
]
sqlite = [
    "aiosqlite>=0.19.0,<0.20.0",
]

# Message brokers
rabbitmq = [
    "aio-pika>=9.3.0,<9.4.0",
]
kafka = [
    "aiokafka>=0.10.0,<0.11.0",
]
redis = [
    "redis>=5.0.1,<5.1.0",
]

# Service discovery
consul = [
    "python-consul>=1.1.0,<1.2.0",
]
etcd = [
    "etcd3>=0.12.0,<0.13.0",
]

# gRPC support
grpc = [
    "grpcio>=1.59.0,<1.60.0",
    "grpcio-tools>=1.59.0,<1.60.0",
    "protobuf>=4.25.0,<4.26.0",
]

# Cloud deployment
aws = [
    "boto3>=1.34.0,<1.35.0",
    "botocore>=1.34.0,<1.35.0",
]
gcp = [
    "google-cloud-run>=0.10.0,<0.11.0",
    "google-auth>=2.25.0,<2.26.0",
]
azure = [
    "azure-containerinstance>=10.1.0,<10.2.0",
    "azure-identity>=1.15.0,<1.16.0",
]

# Kubernetes
k8s = [
    "kubernetes>=28.1.0,<28.2.0",
]

# Enhanced monitoring
monitoring = [
    "jaeger-client>=4.8.0,<4.9.0",
    "opentelemetry-exporter-jaeger>=1.21.0,<1.22.0",
    "grafana-api>=1.0.3,<1.1.0",
]

# Development tools
dev = [
    "pytest>=7.4.3,<7.5.0",
    "pytest-asyncio>=0.21.1,<0.22.0",
    "pytest-cov>=4.1.0,<4.2.0",
    "black>=23.11.0,<23.12.0",
    "isort>=5.12.0,<5.13.0",
    "flake8>=6.1.0,<6.2.0",
    "mypy>=1.7.0,<1.8.0",
    "pre-commit>=3.5.0,<3.6.0",
]

# All optional dependencies
all = [
    "fastapi-microservices-sdk[mysql,mongodb,sqlite,rabbitmq,kafka,redis,consul,etcd,grpc,aws,gcp,azure,k8s,monitoring]"
]

# CLI ENTRY POINTS
[project.scripts]
fastapi-sdk = "fastapi_microservices_sdk.cli.main:app"
fastapi-microservices = "fastapi_microservices_sdk.cli.main:app"

# SETUPTOOLS CONFIGURATION
[tool.setuptools]
packages = ["fastapi_microservices_sdk"]

[tool.setuptools.package-dir]
fastapi_microservices_sdk = "fastapi_microservices_sdk"

# BLACK CONFIGURATION
[tool.black]
line-length = 88
target-version = ['py38']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

# ISORT CONFIGURATION  
[tool.isort]
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
line_length = 88
profile = "black"

# PYTEST CONFIGURATION
[tool.pytest.ini_options]
minversion = "6.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
    "e2e: marks tests as end-to-end tests",
    "asyncio: marks tests as async tests",
]

# MYPY CONFIGURATION
[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

# COVERAGE CONFIGURATION
[tool.coverage.run]
source = ["fastapi_microservices_sdk"]
omit = ["*/tests/*", "*/test_*.py"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

# PROJECT URLs
[project.urls]
Homepage = "https://github.com/fastapi-microservices/sdk"
Documentation = "https://fastapi-microservices-sdk.readthedocs.io/"
Repository = "https://github.com/fastapi-microservices/sdk.git"
"Bug Tracker" = "https://github.com/fastapi-microservices/sdk/issues"
Changelog = "https://github.com/fastapi-microservices/sdk/blob/main/CHANGELOG.md"