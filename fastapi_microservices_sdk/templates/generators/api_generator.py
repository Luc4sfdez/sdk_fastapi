"""
API Generator for FastAPI microservices.
"""

from pathlib import Path
from typing import Dict, Any, List
from .base import CodeGenerator


class APIGenerator(CodeGenerator):
    """Generate API endpoints and routes."""
    
    def __init__(self, config):
        super().__init__(
            name="api_generator",
            description="Generate API endpoints and routes"
        )
        self.config = config
    
    def generate(self, variables: Dict[str, Any], output_path: Path) -> List[Path]:
        """Generate API files."""
        
        generated_files = []
        
        # Generate router
        router_file = self._generate_router(variables, output_path)
        generated_files.append(router_file)
        
        # Generate schemas if validation is enabled
        if variables.get("enable_validation", True):
            schema_file = self._generate_schemas(variables, output_path)
            generated_files.append(schema_file)
        
        # Generate dependencies if auth is enabled
        if variables.get("enable_auth", False):
            deps_file = self._generate_dependencies(variables, output_path)
            generated_files.append(deps_file)
        
        return generated_files
    
    def _generate_router(self, variables: Dict[str, Any], output_path: Path) -> Path:
        """Generate API router file."""
        
        api_name = variables.get("api_name", "item")
        model_name = variables.get("model_name", api_name)
        enable_crud = variables.get("enable_crud", True)
        enable_auth = variables.get("enable_auth", False)
        
        router_content = f'''"""
API router for {api_name}.
Generated by FastAPI Microservices SDK.
"""

from fastapi import APIRouter, Depends, HTTPException, Query
from typing import List, Optional

'''
        
        # Add imports based on configuration
        if enable_auth:
            router_content += f'''from ..dependencies import get_current_user
from ..models.user import User
'''
        
        router_content += f'''from ..models.{model_name} import {model_name.title()}
from ..schemas.{model_name} import {model_name.title()}Create, {model_name.title()}Update, {model_name.title()}Response
from ..services.{model_name}_service import {model_name.title()}Service

router = APIRouter()

'''
        
        if enable_crud:
            # Generate CRUD endpoints
            router_content += self._generate_crud_endpoints(api_name, model_name, enable_auth)
        else:
            # Generate basic endpoints
            router_content += self._generate_basic_endpoints(api_name, model_name, enable_auth)
        
        router_file = output_path / f"{api_name}_router.py"
        router_file.write_text(router_content)
        
        return router_file
    
    def _generate_crud_endpoints(self, api_name: str, model_name: str, enable_auth: bool) -> str:
        """Generate CRUD endpoints."""
        
        auth_dep = ", current_user: User = Depends(get_current_user)" if enable_auth else ""
        
        return f'''
@router.get("/", response_model=List[{model_name.title()}Response])
async def get_{api_name}s(
    skip: int = Query(0, ge=0, description="Number of items to skip"),
    limit: int = Query(100, ge=1, le=1000, description="Number of items to return"),
    service: {model_name.title()}Service = Depends(){auth_dep}
):
    """Get all {api_name}s with pagination."""
    return await service.get_all(skip=skip, limit=limit)


@router.get("/{{item_id}}", response_model={model_name.title()}Response)
async def get_{api_name}(
    item_id: int,
    service: {model_name.title()}Service = Depends(){auth_dep}
):
    """Get {api_name} by ID."""
    item = await service.get_by_id(item_id)
    if not item:
        raise HTTPException(status_code=404, detail="{model_name.title()} not found")
    return item


@router.post("/", response_model={model_name.title()}Response, status_code=201)
async def create_{api_name}(
    item: {model_name.title()}Create,
    service: {model_name.title()}Service = Depends(){auth_dep}
):
    """Create new {api_name}."""
    return await service.create(item)


@router.put("/{{item_id}}", response_model={model_name.title()}Response)
async def update_{api_name}(
    item_id: int,
    item: {model_name.title()}Update,
    service: {model_name.title()}Service = Depends(){auth_dep}
):
    """Update {api_name}."""
    updated_item = await service.update(item_id, item)
    if not updated_item:
        raise HTTPException(status_code=404, detail="{model_name.title()} not found")
    return updated_item


@router.delete("/{{item_id}}", status_code=204)
async def delete_{api_name}(
    item_id: int,
    service: {model_name.title()}Service = Depends(){auth_dep}
):
    """Delete {api_name}."""
    success = await service.delete(item_id)
    if not success:
        raise HTTPException(status_code=404, detail="{model_name.title()} not found")


@router.get("/search/", response_model=List[{model_name.title()}Response])
async def search_{api_name}s(
    q: str = Query(..., min_length=1, description="Search query"),
    skip: int = Query(0, ge=0, description="Number of items to skip"),
    limit: int = Query(100, ge=1, le=1000, description="Number of items to return"),
    service: {model_name.title()}Service = Depends(){auth_dep}
):
    """Search {api_name}s."""
    return await service.search(q, skip=skip, limit=limit)
'''
    
    def _generate_basic_endpoints(self, api_name: str, model_name: str, enable_auth: bool) -> str:
        """Generate basic endpoints."""
        
        auth_dep = ", current_user: User = Depends(get_current_user)" if enable_auth else ""
        
        return f'''
@router.get("/", response_model=List[{model_name.title()}Response])
async def get_{api_name}s(
    service: {model_name.title()}Service = Depends(){auth_dep}
):
    """Get all {api_name}s."""
    return await service.get_all()


@router.get("/{{item_id}}", response_model={model_name.title()}Response)
async def get_{api_name}(
    item_id: int,
    service: {model_name.title()}Service = Depends(){auth_dep}
):
    """Get {api_name} by ID."""
    item = await service.get_by_id(item_id)
    if not item:
        raise HTTPException(status_code=404, detail="{model_name.title()} not found")
    return item


@router.post("/", response_model={model_name.title()}Response, status_code=201)
async def create_{api_name}(
    item: {model_name.title()}Create,
    service: {model_name.title()}Service = Depends(){auth_dep}
):
    """Create new {api_name}."""
    return await service.create(item)
'''
    
    def _generate_schemas(self, variables: Dict[str, Any], output_path: Path) -> Path:
        """Generate Pydantic schemas."""
        
        api_name = variables.get("api_name", "item")
        model_name = variables.get("model_name", api_name)
        
        schema_content = f'''"""
Pydantic schemas for {model_name}.
Generated by FastAPI Microservices SDK.
"""

from pydantic import BaseModel, Field, ConfigDict
from typing import Optional
from datetime import datetime


class {model_name.title()}Base(BaseModel):
    """Base schema for {model_name}."""
    name: str = Field(..., description="Name of the {model_name}", min_length=1, max_length=100)
    description: Optional[str] = Field(None, description="Description of the {model_name}", max_length=500)
    is_active: bool = Field(True, description="Whether the {model_name} is active")


class {model_name.title()}Create({model_name.title()}Base):
    """Schema for creating {model_name}."""
    pass


class {model_name.title()}Update(BaseModel):
    """Schema for updating {model_name}."""
    name: Optional[str] = Field(None, description="Name of the {model_name}", min_length=1, max_length=100)
    description: Optional[str] = Field(None, description="Description of the {model_name}", max_length=500)
    is_active: Optional[bool] = Field(None, description="Whether the {model_name} is active")


class {model_name.title()}Response({model_name.title()}Base):
    """Schema for {model_name} response."""
    model_config = ConfigDict(from_attributes=True)
    
    id: int = Field(..., description="ID of the {model_name}")
    created_at: datetime = Field(..., description="Creation timestamp")
    updated_at: datetime = Field(..., description="Last update timestamp")


class {model_name.title()}List(BaseModel):
    """Schema for {model_name} list response."""
    items: List[{model_name.title()}Response] = Field(..., description="List of {model_name}s")
    total: int = Field(..., description="Total number of items")
    skip: int = Field(..., description="Number of items skipped")
    limit: int = Field(..., description="Number of items returned")
'''
        
        schema_file = output_path / f"{model_name}_schemas.py"
        schema_file.write_text(schema_content)
        
        return schema_file
    
    def _generate_dependencies(self, variables: Dict[str, Any], output_path: Path) -> Path:
        """Generate FastAPI dependencies."""
        
        deps_content = '''"""
FastAPI dependencies.
Generated by FastAPI Microservices SDK.
"""

from fastapi import Depends, HTTPException, status
from fastapi.security import HTTPBearer, HTTPAuthorizationCredentials
from typing import Optional
import jwt
from datetime import datetime, timedelta

from ..config import settings
from ..models.user import User
from ..services.user_service import UserService

security = HTTPBearer()


async def get_current_user(
    credentials: HTTPAuthorizationCredentials = Depends(security),
    user_service: UserService = Depends()
) -> User:
    """Get current authenticated user."""
    
    credentials_exception = HTTPException(
        status_code=status.HTTP_401_UNAUTHORIZED,
        detail="Could not validate credentials",
        headers={"WWW-Authenticate": "Bearer"},
    )
    
    try:
        payload = jwt.decode(
            credentials.credentials, 
            settings.JWT_SECRET_KEY, 
            algorithms=[settings.JWT_ALGORITHM]
        )
        user_id: int = payload.get("sub")
        if user_id is None:
            raise credentials_exception
    except jwt.PyJWTError:
        raise credentials_exception
    
    user = await user_service.get_by_id(user_id)
    if user is None:
        raise credentials_exception
    
    return user


async def get_current_active_user(
    current_user: User = Depends(get_current_user)
) -> User:
    """Get current active user."""
    
    if not current_user.is_active:
        raise HTTPException(
            status_code=status.HTTP_400_BAD_REQUEST, 
            detail="Inactive user"
        )
    
    return current_user


def create_access_token(data: dict, expires_delta: Optional[timedelta] = None):
    """Create JWT access token."""
    
    to_encode = data.copy()
    if expires_delta:
        expire = datetime.utcnow() + expires_delta
    else:
        expire = datetime.utcnow() + timedelta(minutes=15)
    
    to_encode.update({"exp": expire})
    encoded_jwt = jwt.encode(to_encode, settings.JWT_SECRET_KEY, algorithm=settings.JWT_ALGORITHM)
    
    return encoded_jwt
'''
        
        deps_file = output_path / "dependencies.py"
        deps_file.write_text(deps_content)
        
        return deps_file